<?php

/**
 * @file
 * Ubercart Paymill Integration module.
 *
 * Created by: Topsitemakers
 * http://www.topsitemakers.com/
 */

/**
 * Constants used in the module.
 */
// Paymill API endpoint; this will be used as a default in case the user did
// not enter a new one in the admin.
define('UC_PAYMILL_API', 'https://api.paymill.de/v2/');
// URL to the Paymill JS bridge.
define('UC_PAYMILL_BRIDGE', 'https://bridge.paymill.com/');
// Default description text sent over to Paymill for each order.
define('UC_PAYMILL_DESCRIPTION_PATTERN', 'Payment processed through the [site-name] website.');

/**
 * Implements hook_uc_payment_gateway().
 */
function uc_paymill_uc_payment_gateway() {
  $gateways['paymill'] = array(
    'title' => t('Paymill'),
    'description' => t('Process credit card payments using the Paymill API.'),
    'settings' => 'uc_paymill_settings_form',
    'credit' => 'uc_paymill_charge',
  );

  return $gateways;
}

/**
 * Callback for payment gateway settings.
 */
function uc_paymill_settings_form($form, &$form_state) {
  $keys = _uc_paymill_get_keys();

  // General settings.
  $form['uc_paymill_general'] = array(
    '#type' => 'fieldset',
    '#title' => t('General Settings'),
    '#collapsible' => FALSE,
  );
  $form['uc_paymill_general']['uc_paymill_description'] = array(
    '#type' => 'textfield',
    '#title' => t('Description'),
    '#description' => t('Order description text that will be displayed in Paymill administration pages. You may use [site-name] and [order-id] tokens.'),
    '#default_value' => variable_get('uc_paymill_description', UC_PAYMILL_DESCRIPTION_PATTERN),
  );
  // URL of the Paymill API endpoint.
  $form['uc_paymill_general']['uc_paymill_api_endpoint'] = array(
    '#type' => 'textfield',
    '#title' => t('API Endpoint'),
    '#default_value' => variable_get('uc_paymill_api_endpoint', UC_PAYMILL_API),
  );
  // URL of the Paymill bridge scripts.
  $form['uc_paymill_general']['uc_paymill_bridge'] = array(
    '#type' => 'textfield',
    '#title' => t('Bridge URL'),
    '#default_value' => variable_get('uc_paymill_bridge', UC_PAYMILL_BRIDGE),
  );
  // Mode switch.
  $form['uc_paymill_general']['uc_paymill_mode'] = array(
    '#type' => 'select',
    '#title' => t('Operation Mode'),
    '#default_value' => variable_get('uc_paymill_mode', 'test'),
    '#options' => array(
      'live' => t('Live'),
      'test' => t('Test'),
    ),
  );
  // Test settings.
  $form['uc_paymill_test'] = array(
    '#type' => 'fieldset',
    '#title' => t('Test Keys'),
    '#collapsible' => FALSE,
  );
  $form['uc_paymill_test']['uc_paymill_test_private'] = array(
    '#type' => 'textfield',
    '#title' => t('Private Keys'),
    '#default_value' => $keys->test_private,
  );
  $form['uc_paymill_test']['uc_paymill_test_public'] = array(
    '#type' => 'textfield',
    '#title' => t('Public Keys'),
    '#default_value' => $keys->test_public,
  );
  // Live settings.
  $form['uc_paymill_live'] = array(
    '#type' => 'fieldset',
    '#title' => t('Live Keys'),
    '#collapsible' => FALSE,
  );
  $form['uc_paymill_live']['uc_paymill_live_private'] = array(
    '#type' => 'textfield',
    '#title' => t('Private Keys'),
    '#default_value' => $keys->live_private,
  );
  $form['uc_paymill_live']['uc_paymill_live_public'] = array(
    '#type' => 'textfield',
    '#title' => t('Public Keys'),
    '#default_value' => $keys->live_public,
  );

  return $form;
}

/**
 * Implements hook_form_FORM_ID_alter() for uc_payment_method_settings_form().
 */
function uc_paymill_form_uc_payment_method_settings_form_alter(&$form, &$form_state) {
  if ($form_state['build_info']['args'][0] == 'credit') {
    $form['#submit'][]   = 'uc_paymill_settings_form_submit';
    $form['#validate'][] = 'uc_paymill_settings_form_validate';
  }
}

/**
 * Payment gateway settings form submit handler.
 */
function uc_paymill_settings_form_submit($form, &$form_state) {
  // If CC encryption has been configured properly.
  if ($key = uc_credit_encryption_key()) {
    // Setup our encryption object.
    $crypt = new UbercartEncryption();

    // Encrypt the Paymill keys.
    variable_set('uc_paymill_test_public',  $crypt->encrypt($key, $form_state['values']['uc_paymill_test_public']));
    variable_set('uc_paymill_test_private', $crypt->encrypt($key, $form_state['values']['uc_paymill_test_private']));
    variable_set('uc_paymill_live_public',  $crypt->encrypt($key, $form_state['values']['uc_paymill_live_public']));
    variable_set('uc_paymill_live_private', $crypt->encrypt($key, $form_state['values']['uc_paymill_live_private']));

    // Store any errors.
    uc_store_encryption_errors($crypt, 'uc_paymill');
  }
}

/**
 * Payment gateway settings form validation handler.
 */
function uc_paymill_settings_form_validate($form, &$form_state) {}

/**
 * Main handler for processing credit card transactions.
 */
function uc_paymill_charge($order_id, $amount, $data) {
  return array(
    'success' => TRUE,
    'comment' => 'Comment',
    'message' => 'Message',
    'uid'     => 1,
  );
}

/**
 * Implements hook_libraries_info().
 */
function uc_paymill_libraries_info() {
  $libraries['paymill'] = array(
    'name' => 'Paymill',
    'vendor' => 'http://www.paymill.com/',
    'download_url' => 'https://github.com/paymill/paymill-php/archive/master.zip',
    'path' => 'lib/Services/Paymill',
    'version arguments' => array(
      'file' => 'lib/Services/Paymill/Apiclient/Curl.php',
      'pattern' => '@Paymill-php/([0-9\.]+)@',
      'lines' => 60,
    ),
    'files' => array(
      'php' => array(
        'Clients.php',
        'Coupons.php',
        'Exception.php',
        'Offers.php',
        'Payments.php',
        'Refunds.php',
        'Subscriptions.php',
        'Transactions.php',
      ),
    ),
  );

  return $libraries;
}

/**
 * Helper function - decrypts the login data for using Auth.Net APIs.
 */
function _uc_paymill_get_keys($get_active_keys = FALSE) {
  static $data;

  if (!empty($data)) {
    return $data;
  }

  $test_public  = variable_get('uc_paymill_test_public',  '');
  $test_private = variable_get('uc_paymill_test_private', '');
  $live_public  = variable_get('uc_paymill_live_public',  '');
  $live_private = variable_get('uc_paymill_live_private', '');

  // If CC encryption has been configured properly.
  if ($key = uc_credit_encryption_key()) {
    // Setup our encryption object.
    $crypt = new UbercartEncryption();
    $test_public  = $crypt->decrypt($key, $test_public);
    $test_private = $crypt->decrypt($key, $test_private);
    $live_public  = $crypt->decrypt($key, $live_public);
    $live_private = $crypt->decrypt($key, $live_private);

    // Store any errors.
    uc_store_encryption_errors($crypt, 'uc_paymill');
  }

  $mode = variable_get('uc_paymill_mode', 'live');
  if ($get_active_keys) {
    if ($mode == 'live') {
      // Return only live keys.
      $data = array(
        'public'  => $live_public,
        'private' => $live_private,
      );
    }
    else {
      // Return only test keys.
      $data = array(
        'public'  => $test_public,
        'private' => $test_private,
      );
    }
  }
  else {
    // Return all keys - this is for the admin settings page.
    $data = array(
      'test_public'  => $test_public,
      'test_private' => $test_private,
      'live_public'  => $live_public,
      'live_private' => $live_private,
    );
  }

  return (object)$data;
}

/**
 * Helper function - show a human readable message about Paymill error.
 */
function _uc_paymill_get_error_text($code) {
  switch ($code) {
    case 'internal_server_error':
      return t('Communication with Paymill failed.');

    case 'invalid_public_key':
      return t('Invalid public key.');

    case 'unknown_error':
      return t('Unknown error.');

    case '3ds_cancelled':
      return t('User cancelled 3D security password entry.');

    case 'field_invalid_card_number':
      return t('Missing or invalid credit card number.');

    case 'field_invalid_card_exp_year':
      return t('Missing or invalid expiry year.');

    case 'field_invalid_card_exp_month':
      return t('Missing or invalid expiry month.');

    case 'field_invalid_card_exp':
      return t('Card has expired.');

    case 'field_invalid_card_cvc':
      return t('Missing or invalid checking number.');

    case 'field_invalid_card_holder':
      return t('Missing or invalid cardholder name.');

    case 'field_invalid_account_number':
      return t('Missing or invalid bank account number.');

    case 'field_invalid_account_holder':
      return t('Missing or invalid bank account holder.');

    case 'field_invalid_bank_code':
      return t('Missing or invalid zip code.');

    default:
      return str_replace('_', ' ', $code);
  }
}
