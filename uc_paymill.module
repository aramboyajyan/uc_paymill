<?php

/**
 * @file
 * Ubercart Paymill Integration module.
 *
 * Created by: Topsitemakers
 * http://www.topsitemakers.com/
 */

/**
 * Module constants.
 * 
 * The constants below are just used as defaults before the user enters those
 * values in the admin.
 */
// Paymill API endpoint.
define('UC_PAYMILL_API', 'https://api.paymill.de/v2/');
// URL to the Paymill JS bridge.
define('UC_PAYMILL_BRIDGE', 'https://bridge.paymill.com/');
// Default description text sent over to Paymill for each order.
define('UC_PAYMILL_DESCRIPTION_PATTERN', 'Payment processed through the [site-name] website.');

/**
 * Implements hook_uc_payment_gateway().
 */
function uc_paymill_uc_payment_gateway() {
  $gateways['paymill'] = array(
    'title'       => t('Paymill'),
    'description' => t('Process credit card payments using the Paymill API.'),
    'settings'    => 'uc_paymill_settings_form',
    'credit'      => 'uc_paymill_charge',
  );

  return $gateways;
}

/**
 * Callback for payment gateway settings.
 */
function uc_paymill_settings_form($form, &$form_state) {
  $keys = _uc_paymill_get_keys();

  // General settings.
  $form['uc_paymill_general'] = array(
    '#type' => 'fieldset',
    '#title' => t('General Settings'),
    '#collapsible' => FALSE,
  );
  $form['uc_paymill_general']['uc_paymill_description'] = array(
    '#type' => 'textfield',
    '#title' => t('Description'),
    '#description' => t('Order description text that will be displayed in Paymill administration pages. You may use [site-name] and [order-id] tokens.'),
    '#default_value' => variable_get('uc_paymill_description', UC_PAYMILL_DESCRIPTION_PATTERN),
  );
  // URL of the Paymill API endpoint.
  $form['uc_paymill_general']['uc_paymill_api_endpoint'] = array(
    '#type' => 'textfield',
    '#title' => t('API Endpoint'),
    '#default_value' => variable_get('uc_paymill_api_endpoint', UC_PAYMILL_API),
  );
  // URL of the Paymill bridge scripts.
  $form['uc_paymill_general']['uc_paymill_bridge'] = array(
    '#type' => 'textfield',
    '#title' => t('Bridge URL'),
    '#default_value' => variable_get('uc_paymill_bridge', UC_PAYMILL_BRIDGE),
  );
  // Mode switch.
  $form['uc_paymill_general']['uc_paymill_mode'] = array(
    '#type' => 'select',
    '#title' => t('Operation Mode'),
    '#default_value' => variable_get('uc_paymill_mode', 'test'),
    '#options' => array(
      'live' => t('Live'),
      'test' => t('Test'),
    ),
  );
  // Test settings.
  $form['uc_paymill_test'] = array(
    '#type' => 'fieldset',
    '#title' => t('Test Keys'),
    '#collapsible' => FALSE,
  );
  $form['uc_paymill_test']['uc_paymill_test_private'] = array(
    '#type' => 'textfield',
    '#title' => t('Private Keys'),
    '#default_value' => $keys->test_private,
  );
  $form['uc_paymill_test']['uc_paymill_test_public'] = array(
    '#type' => 'textfield',
    '#title' => t('Public Keys'),
    '#default_value' => $keys->test_public,
  );
  // Live settings.
  $form['uc_paymill_live'] = array(
    '#type' => 'fieldset',
    '#title' => t('Live Keys'),
    '#collapsible' => FALSE,
  );
  $form['uc_paymill_live']['uc_paymill_live_private'] = array(
    '#type' => 'textfield',
    '#title' => t('Private Keys'),
    '#default_value' => $keys->live_private,
  );
  $form['uc_paymill_live']['uc_paymill_live_public'] = array(
    '#type' => 'textfield',
    '#title' => t('Public Keys'),
    '#default_value' => $keys->live_public,
  );

  return $form;
}

/**
 * Implements hook_form_FORM_ID_alter() for uc_cart_checkout_form().
 */
function uc_paymill_form_uc_cart_checkout_form_alter(&$form, &$form_state) {
  // Make sure Paymill is selected as default credit card processor.
  if (variable_get('uc_payment_credit_gateway') == 'paymill') {
    // Get the public keys.
    $keys = _uc_paymill_get_keys($get_active_keys = TRUE);
    // Attach currency code and public keys.
    $form['#attached']['js'][] = array(
      'data' => array(
        'ucPaymill'      => array(
          'currencyCode' => variable_get('uc_currency_code'),
          'publicKey'    => $keys->public,
        ),
      ),
      'type' => 'setting',
    );
    // Add Paymill bridge script.
    drupal_add_js(variable_get('uc_paymill_bridge'));
    // Attach main JS file for communication with Paymill.
    $form['#attached']['js'][] = drupal_get_path('module', 'uc_paymill') . '/uc_paymill.js';
    // Add hidden field for storing the errors.
    $form['uc_paymill']['errors'] = array(
      '#type' => 'hidden',
      '#attributes' => array('id' => 'uc-paymill-errors'),
    );
    // Add hidden field for storing the Paymill token.
    $form['uc_paymill']['token'] = array(
      '#type' => 'hidden',
      '#attributes' => array('id' => 'uc-paymill-token'),
    );
    // Add hidden field for storing the total order amount.
    $total = 0;
    $order = uc_cart_get_contents();
    foreach ($order as $product) {
      $total += $product->sell_price;
    }
    $form['uc_paymill']['total'] = array(
      '#type'       => 'hidden',
      '#value'      => $total,
      '#attributes' => array('id' => 'uc-paymill-order-total'),
    );
    // Add text that will be displayed while we are generating Paymill token.
    // This has to be here because we are processing the payment through JS -
    // meaning the user should be notified that the process is taking place
    // and he/she should wait.
    $form['actions']['continue']['#attributes'] = array(
      'data-value-default'    => $form['actions']['continue']['#value'],
      'data-value-processing' => t('Please wait'),
    );
    $form['#submit'][] = 'uc_paymill_checkout_form_submit';
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for uc_payment_method_settings_form().
 */
function uc_paymill_form_uc_payment_method_settings_form_alter(&$form, &$form_state) {
  if ($form_state['build_info']['args'][0] == 'credit') {
    $form['#submit'][]   = 'uc_paymill_settings_form_submit';
    $form['#validate'][] = 'uc_paymill_settings_form_validate';
  }
}

/**
 * Checkout form submit handler.
 */
function uc_paymill_checkout_form_submit($form, &$form_state) {
  // Make sure that either the Paymill token or errors are passed.
  if ($form_state['values']['token'] == '' && $form_state['values']['errors'] == '') {
    drupal_set_message(t('An error occurred. Please try again.'), 'error');
    drupal_goto('cart/checkout');
  }
  elseif ($form_state['values']['token'] != '') {
    // Everything is OK. Encrypt and save the Paymill token to the session.
    $_SESSION['uc_paymill_token'] = _uc_paymill_encrypt_token($form_state['values']['token']);
  }
  elseif ($form_state['values']['errors'] != '') {
    drupal_set_message(t('The following error occurred: @uc_paymill_error', array('@uc_paymill_error' => _uc_paymill_get_error_text($form_state['values']['errors']))), 'error');
    drupal_goto('cart/checkout');
  }
}

/**
 * Payment gateway settings form submit handler.
 */
function uc_paymill_settings_form_submit($form, &$form_state) {
  // If CC encryption has been configured properly.
  if ($key = uc_credit_encryption_key()) {
    // Setup our encryption object.
    $crypt = new UbercartEncryption();

    // Encrypt the Paymill keys.
    variable_set('uc_paymill_test_public', $crypt->encrypt($key, $form_state['values']['uc_paymill_test_public']));
    variable_set('uc_paymill_test_private', $crypt->encrypt($key, $form_state['values']['uc_paymill_test_private']));
    variable_set('uc_paymill_live_public', $crypt->encrypt($key, $form_state['values']['uc_paymill_live_public']));
    variable_set('uc_paymill_live_private', $crypt->encrypt($key, $form_state['values']['uc_paymill_live_private']));

    // Store any errors.
    uc_store_encryption_errors($crypt, 'uc_paymill');
  }
}

/**
 * Payment gateway settings form validation handler.
 */
function uc_paymill_settings_form_validate($form, &$form_state) {
  // Make sure all required fields are filled out.
  if ($form_state['values']['uc_paymill_api_endpoint'] == '') {
    form_set_error('uc_paymill_api_endpoint', t('Please enter API endpoint URL.'));
  }
  if ($form_state['values']['uc_paymill_bridge'] == '') {
    form_set_error('uc_paymill_bridge', t('Please enter Paymill bridge URL.'));
  }
  // Make sure all merchant information is entered for the currently selected
  // mode.
  $mode = $form_state['values']['uc_paymill_mode'];
  if ($form_state['values']['uc_paymill_' . $mode . '_public'] == '') {
    form_set_error('uc_paymill_' . $mode . '_public', t('Please enter public keys.'));
  }
  if ($form_state['values']['uc_paymill_' . $mode . '_private'] == '') {
    form_set_error('uc_paymill_' . $mode . '_private', t('Please enter private keys.'));
  }
}

/**
 * Main handler for processing credit card transactions.
 */
function uc_paymill_charge($order_id, $amount, $data) {
  global $user;

  // Get the keys necessary for communication with Paymill and load the order.
  $keys  = _uc_paymill_get_keys($get_active_keys = TRUE);
  $order = uc_order_load($order_id);

  // Get API endpoint URL.
  $paymill_api_endpoint = variable_get('uc_paymill_api_endpoint', UC_PAYMILL_API);

  // Prepare the order description.
  $description_pattern  = variable_get('uc_paymill_description', UC_PAYMILL_DESCRIPTION_PATTERN);
  $description = strtr($description_pattern, array(
    '[site-name]' => variable_get('site_name'),
    '[order-id]'  => $order->order_id,
  ));

  // Load Paymill and process the payment.
  libraries_load('paymill');
  $paymill_transaction = new Services_Paymill_Transactions($keys->private, $paymill_api_endpoint);
  $details = array(
    'amount'      => $order->order_total,
    'currency'    => variable_get('uc_currency_code'),
    'token'       => _uc_paymill_get_token(),
    'description' => $description,
  );
  $payment = $paymill_transaction->create($details);
  // Remove the token from session.
  unset($_SESSION['uc_paymill_token']);
  if (isset($payment['error'])) {
    $success = FALSE;
    // Check if this is an error related to a specific field passed to
    // Paymill.
    if (is_array($payment['error'])) {
      // If the "error" key is an array, it consists of the following keys:
      // > messages    => array with Paymill error codes.
      // > field       => field name (amount/currency/token/etc.).
      drupal_set_message(t('Paymill returned the following error message(s):'));
      foreach ($payment['error']['messages'] as $error_message) {
        drupal_set_message(t('@field: @message', array('@field' => check_plain($payment['error']['field']), '@message' => check_plain($error_message))), 'error');
      }
    }
    else {
      // Payment didn't go through; set an error message.
      // Check if Paymill returned a response code.
      $response_code = '';
      if (isset($payment['response_code']) && $payment['response_code'] != '') {
        // Get human-readable message that we can show to the client.
        // Note: this is already filtered using check_plain() function.
        $response_code = _uc_paymill_get_error_text($payment['response_code']);
      }
      drupal_set_message(t('Payment processing failed. Error message received: @error. Response code: @response_code.', array('@error' => check_plain($payment['error']), '@response_code' => $response_code)), 'error');
      // Log the error message as well for debugging purposes.
      watchdog('paymill_error', 'Paymill processing failed. Error message: @error_message. HTTP status code: @status_code. Response code: @response_code.', array(
        '@error_message' => check_plain($payment['error']),
        '@response_code' => check_plain($payment['response_code']),
        '@status_code'   => check_plain($payment['http_status_code']),
      ));
    }
  }
  else {
    $success = TRUE;
  }

  $result = array(
    'success' => $success,
    'comment' => t('Card charged via Paymill. Transaction ID: @transaction_id, payment ID: @payment_id, client ID: @client_id.', array(
      '@transaction_id' => check_plain($payment['id']),
      '@payment_id'     => check_plain($payment['payment']['id']),
      '@client_id'      => check_plain($payment['client']['id']),
    )),
    'message' => t('Successfully charged'),
    'uid'     => $user->uid,
  );

  return $result;
}

/**
 * Implements hook_libraries_info().
 */
function uc_paymill_libraries_info() {
  $libraries['paymill'] = array(
    'name'              => 'Paymill',
    'vendor'            => 'http://www.paymill.com/',
    'download_url'      => 'https://github.com/paymill/paymill-php/archive/master.zip',
    'path'              => 'lib/Services/Paymill',
    'version arguments' => array(
      'file'            => 'lib/Services/Paymill/Apiclient/Curl.php',
      'pattern'         => '@Paymill-php/([0-9\.]+)@',
      'lines'           => 60,
    ),
    'files' => array(
      'php' => array(
        'Clients.php',
        'Coupons.php',
        'Exception.php',
        'Offers.php',
        'Payments.php',
        'Refunds.php',
        'Subscriptions.php',
        'Transactions.php',
      ),
    ),
  );

  return $libraries;
}

/**
 * Helper function - return the encrypted value of the Paymill token.
 */
function _uc_paymill_encrypt_token($token) {
  if ($key = uc_credit_encryption_key()) {
    $crypt = new UbercartEncryption();
    $token = $crypt->encrypt($key, $token);
  }

  return $token;
}

/**
 * Helper function - get the token from session and decrypt it.
 */
function _uc_paymill_get_token() {
  static $token;

  if (!empty($token)) {
    return $token;
  }

  $token = $_SESSION['uc_paymill_token'];

  if ($key = uc_credit_encryption_key()) {
    $crypt = new UbercartEncryption();
    $token = $crypt->decrypt($key, $token);
    uc_store_encryption_errors($crypt, 'uc_paymill_token');
  }

  return $token;
}

/**
 * Helper function - decrypts the login data for using Paymill APIs.
 */
function _uc_paymill_get_keys($get_active_keys = FALSE) {
  static $data;

  if (!empty($data)) {
    return $data;
  }

  $test_public  = variable_get('uc_paymill_test_public', '');
  $test_private = variable_get('uc_paymill_test_private', '');
  $live_public  = variable_get('uc_paymill_live_public', '');
  $live_private = variable_get('uc_paymill_live_private', '');

  // If CC encryption has been configured properly.
  if ($key = uc_credit_encryption_key()) {
    // Setup our encryption object.
    $crypt = new UbercartEncryption();
    $test_public  = $crypt->decrypt($key, $test_public);
    $test_private = $crypt->decrypt($key, $test_private);
    $live_public  = $crypt->decrypt($key, $live_public);
    $live_private = $crypt->decrypt($key, $live_private);

    // Store any errors.
    uc_store_encryption_errors($crypt, 'uc_paymill_keys');
  }

  $mode = variable_get('uc_paymill_mode', 'live');
  if ($get_active_keys) {
    if ($mode == 'live') {
      // Return only live keys.
      $data = array(
        'public'  => $live_public,
        'private' => $live_private,
      );
    }
    else {
      // Return only test keys.
      $data = array(
        'public'  => $test_public,
        'private' => $test_private,
      );
    }
  }
  else {
    // Return all keys - this is for the admin settings page.
    $data = array(
      'test_public'  => $test_public,
      'test_private' => $test_private,
      'live_public'  => $live_public,
      'live_private' => $live_private,
    );
  }

  return (object) $data;
}

/**
 * Helper function - show a human readable message about Paymill error.
 */
function _uc_paymill_get_error_text($code) {
  switch ($code) {
    case 'internal_server_error':
      return t('Communication with Paymill failed.');

    case 'invalid_public_key':
      return t('Invalid public key.');

    case 'unknown_error':
      return t('Unknown error.');

    case '3ds_cancelled':
      return t('User cancelled 3D security password entry.');

    case 'field_invalid_card_number':
      return t('Missing or invalid credit card number.');

    case 'field_invalid_card_exp_year':
      return t('Missing or invalid expiry year.');

    case 'field_invalid_card_exp_month':
      return t('Missing or invalid expiry month.');

    case 'field_invalid_card_exp':
      return t('Card has expired.');

    case 'field_invalid_card_cvc':
      return t('Missing or invalid checking number.');

    case 'field_invalid_card_holder':
      return t('Missing or invalid cardholder name.');

    case 'field_invalid_account_number':
      return t('Missing or invalid bank account number.');

    case 'field_invalid_account_holder':
      return t('Missing or invalid bank account holder.');

    case 'field_invalid_bank_code':
      return t('Missing or invalid zip code.');

    default:
      // In case the message has not been recognized, try to make it readable.
      $message = strtr(ucfirst($code), array(
        'field_' => '',
        '_'      => ' ',
      ));
      // Log it for future reference.
      watchdog('paymill_unrecognized_error', 'Unrecognized error message received from Paymill: @error', array('@error' => $message));
      return check_plain($message);
  }
}
